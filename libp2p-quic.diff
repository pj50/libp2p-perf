diff --git a/transports/quic/src/endpoint.rs b/transports/quic/src/endpoint.rs
index f30a0da5..c270b882 100644
--- a/transports/quic/src/endpoint.rs
+++ b/transports/quic/src/endpoint.rs
@@ -68,7 +68,7 @@ impl Config {
         let mut transport = quinn_proto::TransportConfig::default();
         transport.max_concurrent_uni_streams(0u32.into()); // Can only panic if value is out of range.
         transport.datagram_receive_buffer_size(None);
-        transport.keep_alive_interval(Some(Duration::from_millis(10)));
+        transport.keep_alive_interval(Some(Duration::from_secs(1)));
         let transport = Arc::new(transport);
 
         let client_tls_config = tls::make_client_config(keypair).unwrap();
diff --git a/transports/quic/src/tls/mod.rs b/transports/quic/src/tls/mod.rs
index 78b31a7d..98cffe12 100644
--- a/transports/quic/src/tls/mod.rs
+++ b/transports/quic/src/tls/mod.rs
@@ -38,9 +38,9 @@ use rustls::{
 // TLS 1.3 __and__ 1.2 cipher suites. But we don't need 1.2.
 static TLS13_CIPHERSUITES: &[SupportedCipherSuite] = &[
     // TLS1.3 suites
-    TLS13_CHACHA20_POLY1305_SHA256,
+    //TLS13_CHACHA20_POLY1305_SHA256,
     TLS13_AES_256_GCM_SHA384,
-    TLS13_AES_128_GCM_SHA256,
+    //TLS13_AES_128_GCM_SHA256,
 ];
 
 const P2P_ALPN: [u8; 6] = *b"libp2p";
